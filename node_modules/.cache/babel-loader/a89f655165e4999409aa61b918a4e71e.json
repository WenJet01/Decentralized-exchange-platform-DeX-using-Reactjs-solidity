{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      this.runSbToken();\n      this.runSimpleStorage(); //  try{\n      //    const instance = await SbToken.deployed();\n      //    instance.mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n      //  }catch(error){\n      //    alert(error);\n      //  }\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runSbToken = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.minting);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.minting = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract;\n      alert(accounts); // Stores a given value, 5 by default.\n      // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n\n      const response = await contract.methods.balanceOf(accounts[0]).call();\n      this.setState({\n        balance: response\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"The balance is: \", this.state.balance));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","getWeb3","App","state","storageValue","web3","accounts","contract","componentDidMount","runSbToken","runSimpleStorage","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","alert","console","minting","methods","set","send","from","response","get","call","balanceOf","balance","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  //state = variables\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    this.runSbToken();\n    this.runSimpleStorage();\n\n\n    \n\n    //  try{\n    //    const instance = await SbToken.deployed();\n    //    instance.mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n    //  }catch(error){\n    //    alert(error);\n    //  }\n\n     \n  };\n\n  runSimpleStorage = async() =>{\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runSbToken = async() => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.minting);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  minting = async () => {\n    const { accounts, contract } = this.state;\n    alert(accounts);\n    // Stores a given value, 5 by default.\n    \n    // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n    const response = await contract.methods.balanceOf(accounts[0]).call();\n\n    this.setState({balance:response})\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <div>The balance is: {this.state.balance}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}