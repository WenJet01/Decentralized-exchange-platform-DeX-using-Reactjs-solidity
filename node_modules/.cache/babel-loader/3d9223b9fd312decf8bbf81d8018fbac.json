{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n\n      this.getSbToken();\n      this.getPool();\n      this.runSimpleStorage();\n    };\n\n    this.tknToWei = n => {\n      return web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToTkn = n => {};\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPool = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPool1 = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; //alert(accounts);\n      // Stores a given value, 5 by default.\n\n      const response1 = await contract.methods.approve(this.state.poolContract.options.address, '100').send({\n        from: accounts[0]\n      });\n      const response2 = await this.state.poolContract.methods.settingUp(accounts[0], '100', '0').send({\n        from: accounts[0]\n      });\n      const response = await contract.methods.balanceOf(this.state.poolContract.options.address).call();\n      this.setState({\n        balancePool: response\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n\n    this.getSbToken = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.minting = async () => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract;\n      alert(this.state.poolContract); // Stores a given value, 5 by default.\n      // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n\n      const response = await contract.methods.balanceOf(accounts[0]).call();\n      await contract.methods.approve(this.state.poolContract.options.address, '100').send({\n        from: accounts[0]\n      });\n      await this.state.poolContract.methods.settingUp(accounts[0], '100', '0').send({\n        from: accounts[0]\n      });\n      const response2 = await contract.methods.balanceOf(this.state.poolContract.options.address).call();\n      this.setState({\n        balance: response,\n        balancePool: response2\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"The balance is: \", this.state.balancePool));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","App","state","storageValue","web3","accounts","contract","componentDidMount","eth","getAccounts","setState","error","alert","console","getSbToken","getPool","runSimpleStorage","tknToWei","n","utils","toWei","weiToTkn","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","runExample","poolContract","getPool1","response1","methods","approve","options","send","from","response2","settingUp","response","balanceOf","call","balancePool","sbTokenContract","set","get","minting","balance","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  //state = variables\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n    \n    this.getSbToken();\n    this.getPool();\n    \n    \n    this.runSimpleStorage();\n    \n   \n  };\n\n  tknToWei = (n) => {\n    return web3.utils.toWei(n, 'ether');\n  }\n\n  weiToTkn = (n) => {\n    \n  }\n\n  runSimpleStorage = async() =>{\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  getPool = async() => {\n    try {\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  getPool1 = async () => {\n    const { accounts, contract } = this.state;\n    //alert(accounts);\n    // Stores a given value, 5 by default.\n    \n    const response1 = await contract.methods.approve(this.state.poolContract.options.address,'100').send({from:accounts[0]});\n    const response2 = await this.state.poolContract.methods.settingUp(accounts[0],'100','0').send({from:accounts[0]});\n    const response = await contract.methods.balanceOf(this.state.poolContract.options.address).call();\n\n    this.setState({balancePool:response})\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  //get sbtoken contract\n  getSbToken = async() => {\n    try {  \n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  minting = async () => {\n    const { accounts, contract } = this.state;\n    alert(this.state.poolContract);\n    // Stores a given value, 5 by default.\n    \n    // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n\n\n    const response = await contract.methods.balanceOf(accounts[0]).call();\n    await contract.methods.approve(this.state.poolContract.options.address,'100').send({from:accounts[0]});\n    await this.state.poolContract.methods.settingUp(accounts[0],'100','0').send({from:accounts[0]});\n    const response2 = await contract.methods.balanceOf(this.state.poolContract.options.address).call();\n\n    this.setState({balance:response,balancePool:response2})\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <div>The balance is: {this.state.balancePool}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}