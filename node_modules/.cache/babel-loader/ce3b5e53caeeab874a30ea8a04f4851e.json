{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport IoIosSwap from \"react-icons/io\";\nimport { TiSpanner } from \"react-icons/ti\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; //@import url('https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      poolSbtBalance: 0,\n      poolEthBalance: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set contract to the state\n\n        this.setState({\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3 or accounts. Check console for details.\");\n        console.error(error);\n      } // await this.getSbTokenContract();\n      // await this.getPoolContract();\n      // await this.getPoolSupply();\n      //await this.runSimpleStorage();\n\n    };\n\n    this.tokenToWei = n => {\n      return this.state.web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      return this.state.web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract or web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPoolSupply = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            sbTokenContract = _this$state2.sbTokenContract,\n            poolContract = _this$state2.poolContract; //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei('50')).send({\n        from: accounts[0]\n      }); //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n      //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n\n      await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei('3')).send({\n        from: accounts[0]\n      });\n      await poolContract.methods.settingUp(this.tokenToWei('3')).send({\n        value: this.tokenToWei('1'),\n        from: accounts[0]\n      }).on('transactionHash', function () {});\n      const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n      const ethBalance = await poolContract.methods.getBalanceEth().call(); //const sbtBalance = '10000';\n      //const ethBalance =  '1000000000';\n\n      this.setState({\n        poolSbtBalance: this.weiToToken(sbtBalance),\n        poolEthBalance: this.weiToToken(ethBalance)\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"divBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(TiSpanner, {\n      style: {\n        fontSize: 35,\n        transform: \"scaleX(-1)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \" Set Up Pool\"), React.createElement(\"div\", {\n      class: \"input-group mb-3\",\n      style: {\n        width: \"70%\",\n        alignItems: \"center\",\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"input-group-text\",\n      id: \"basic-addon1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"ETH\"), React.createElement(\"input\", {\n      type: \"number\",\n      class: \"form-control\",\n      placeholder: \"Amount of Ether...\",\n      step: \"0.00001\",\n      min: \"0.0001\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"The ETH balance is: \", this.state.poolEthBalance), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"The SBT balance is: \", this.state.poolSbtBalance)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","IoIosSwap","TiSpanner","App","state","storageValue","web3","accounts","contract","poolSbtBalance","poolEthBalance","componentDidMount","eth","getAccounts","setState","error","alert","console","tokenToWei","n","utils","toWei","weiToToken","fromWei","runSimpleStorage","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","runExample","methods","set","send","from","response","get","call","getPoolContract","poolContract","getSbTokenContract","sbTokenContract","getPoolSupply","approve","options","transfer","settingUp","value","on","sbtBalance","getBalanceSbt","ethBalance","getBalanceEth","render","fontSize","transform","width","alignItems","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,OAAO,WAAP;AACA,OAAO,sCAAP,C,CACA;;AAIA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BQ,KAF0B,GAElB;AACNC,MAAAA,YAAY,EAAE,CADR;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,QAAQ,EAAE,IAJJ;AAKNC,MAAAA,cAAc,EAAE,CALV;AAMNC,MAAAA,cAAc,EAAE;AANV,KAFkB;;AAAA,SAW1BC,iBAX0B,GAWN,YAAY;AAE9B,UAAI;AACF;AACA,cAAML,IAAI,GAAG,MAAMN,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMO,QAAQ,GAAG,MAAMD,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,aAAKC,QAAL,CAAc;AAAER,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SAAd;AACD,OATD,CASE,OAAOQ,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,+DAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,OAjB6B,CAoB9B;AAEA;AAEA;AAGA;;AAGD,KAzCyB;;AAAA,SA4C1BG,UA5C0B,GA4CZC,CAAD,IAAO;AAClB,aAAO,KAAKf,KAAL,CAAWE,IAAX,CAAgBc,KAAhB,CAAsBC,KAAtB,CAA4BF,CAA5B,EAA+B,OAA/B,CAAP;AACD,KA9CyB;;AAAA,SAiD1BG,UAjD0B,GAiDZH,CAAD,IAAO;AAClB,aAAO,KAAKf,KAAL,CAAWE,IAAX,CAAgBc,KAAhB,CAAsBG,OAAtB,CAA8BJ,CAA9B,EAAiC,OAAjC,CAAP;AACD,KAnDyB;;AAAA,SAqD1BK,gBArD0B,GAqDP,YAAY;AAC7B,UAAI;AACF;AACA,cAAMlB,IAAI,GAAG,MAAMN,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMO,QAAQ,GAAG,MAAMD,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMY,SAAS,GAAG,MAAMnB,IAAI,CAACM,GAAL,CAASc,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAG/B,qBAAqB,CAACgC,QAAtB,CAA+BJ,SAA/B,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAIxB,IAAI,CAACM,GAAL,CAASmB,QAAb,CACflC,qBAAqB,CAACmC,GADP,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAVE,CAgBF;AACA;;AACA,aAAKnB,QAAL,CAAc;AAAER,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,QAAQ,EAAEsB;AAA5B,SAAd,EAAsD,KAAKI,UAA3D;AACD,OAnBD,CAmBE,OAAOnB,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KAhFyB;;AAAA,SAkF1BmB,UAlF0B,GAkFb,YAAY;AAAA,0BACQ,KAAK9B,KADb;AAAA,YACfG,QADe,eACfA,QADe;AAAA,YACLC,QADK,eACLA,QADK,EAGvB;;AACA,YAAMA,QAAQ,CAAC2B,OAAT,CAAiBC,GAAjB,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B;AAAEC,QAAAA,IAAI,EAAE/B,QAAQ,CAAC,CAAD;AAAhB,OAA7B,CAAN,CAJuB,CAMvB;;AACA,YAAMgC,QAAQ,GAAG,MAAM/B,QAAQ,CAAC2B,OAAT,CAAiBK,GAAjB,GAAuBC,IAAvB,EAAvB,CAPuB,CASvB;;AACA,WAAK3B,QAAL,CAAc;AAAET,QAAAA,YAAY,EAAEkC;AAAhB,OAAd;AACD,KA7FyB;;AAAA,SA+F1BG,eA/F0B,GA+FR,YAAY;AAC5B,UAAI;AAEF;AACA,cAAMjB,SAAS,GAAG,MAAM,KAAKrB,KAAL,CAAWE,IAAX,CAAgBM,GAAhB,CAAoBc,GAApB,CAAwBC,KAAxB,EAAxB;AACA,cAAMC,eAAe,GAAG7B,IAAI,CAAC8B,QAAL,CAAcJ,SAAd,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAI,KAAK1B,KAAL,CAAWE,IAAX,CAAgBM,GAAhB,CAAoBmB,QAAxB,CACfhC,IAAI,CAACiC,GADU,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CALE,CAWF;AACA;;AACA,aAAKnB,QAAL,CAAc;AAAE6B,UAAAA,YAAY,EAAEb;AAAhB,SAAd;AACD,OAdD,CAcE,OAAOf,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,4DAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KArHyB;;AAAA,SA0H1B6B,kBA1H0B,GA0HL,YAAY;AAE/B,UAAI;AACF;AACA,cAAMnB,SAAS,GAAG,MAAM,KAAKrB,KAAL,CAAWE,IAAX,CAAgBM,GAAhB,CAAoBc,GAApB,CAAwBC,KAAxB,EAAxB;AACA,cAAMC,eAAe,GAAG9B,OAAO,CAAC+B,QAAR,CAAiBJ,SAAjB,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAI,KAAK1B,KAAL,CAAWE,IAAX,CAAgBM,GAAhB,CAAoBmB,QAAxB,CACfjC,OAAO,CAACkC,GADO,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAJE,CASF;;AACA,aAAKnB,QAAL,CAAc;AAAE+B,UAAAA,eAAe,EAAEf;AAAnB,SAAd;AACD,OAXD,CAWE,OAAOf,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,mFAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KA9IyB;;AAAA,SAkJ1B+B,aAlJ0B,GAkJV,YAAY;AAAA,2BAC0B,KAAK1C,KAD/B;AAAA,YAClBG,QADkB,gBAClBA,QADkB;AAAA,YACRsC,eADQ,gBACRA,eADQ;AAAA,YACSF,YADT,gBACSA,YADT,EAK1B;;AACA,YAAME,eAAe,CAACV,OAAhB,CAAwBY,OAAxB,CAAgCJ,YAAY,CAACK,OAAb,CAAqBf,OAArD,EAA8D,KAAKf,UAAL,CAAgB,IAAhB,CAA9D,EAAqFmB,IAArF,CAA0F;AAAEC,QAAAA,IAAI,EAAE/B,QAAQ,CAAC,CAAD;AAAhB,OAA1F,CAAN,CAN0B,CAO1B;AACA;;AACA,YAAMsC,eAAe,CAACV,OAAhB,CAAwBc,QAAxB,CAAiCN,YAAY,CAACK,OAAb,CAAqBf,OAAtD,EAA+D,KAAKf,UAAL,CAAgB,GAAhB,CAA/D,EAAqFmB,IAArF,CAA0F;AAAEC,QAAAA,IAAI,EAAE/B,QAAQ,CAAC,CAAD;AAAhB,OAA1F,CAAN;AACA,YAAMoC,YAAY,CAACR,OAAb,CAAqBe,SAArB,CAA+B,KAAKhC,UAAL,CAAgB,GAAhB,CAA/B,EAAqDmB,IAArD,CAA0D;AAAEc,QAAAA,KAAK,EAAE,KAAKjC,UAAL,CAAgB,GAAhB,CAAT;AAA+BoB,QAAAA,IAAI,EAAE/B,QAAQ,CAAC,CAAD;AAA7C,OAA1D,EAA8G6C,EAA9G,CAAiH,iBAAjH,EAAoI,YAAY,CAAG,CAAnJ,CAAN;AAIA,YAAMC,UAAU,GAAG,MAAMV,YAAY,CAACR,OAAb,CAAqBmB,aAArB,GAAqCb,IAArC,EAAzB;AACA,YAAMc,UAAU,GAAG,MAAMZ,YAAY,CAACR,OAAb,CAAqBqB,aAArB,GAAqCf,IAArC,EAAzB,CAf0B,CAgB1B;AACA;;AAEA,WAAK3B,QAAL,CAAc;AAAEL,QAAAA,cAAc,EAAE,KAAKa,UAAL,CAAgB+B,UAAhB,CAAlB;AAA+C3C,QAAAA,cAAc,EAAE,KAAKY,UAAL,CAAgBiC,UAAhB;AAA/D,OAAd;AAGD,KAxKyB;AAAA;;AA0K1BE,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKrD,KAAL,CAAWE,IAAhB,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAAEoD,QAAAA,QAAQ,EAAE,EAAZ;AAAiBC,QAAAA,SAAS,EAAE;AAA5B,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,iBADF,EAEE;AAAK,MAAA,KAAK,EAAC,kBAAX;AAA8B,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC,KAAP;AAAcC,QAAAA,UAAU,EAAC,QAAzB;AAAmCC,QAAAA,MAAM,EAAC;AAA1C,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAM,MAAA,KAAK,EAAC,kBAAZ;AAA+B,MAAA,EAAE,EAAC,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,EAIE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,cAA3B;AAA0C,MAAA,WAAW,EAAC,oBAAtD;AAA2E,MAAA,IAAI,EAAC,SAAhF;AAA0F,MAAA,GAAG,EAAC,QAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0B,KAAK1D,KAAL,CAAWM,cAArC,CATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0B,KAAKN,KAAL,CAAWK,cAArC,CAVF,CADF,CADF;AAiBD;;AA/LyB;;AAkM5B,eAAeN,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport IoIosSwap from \"react-icons/io\";\nimport { TiSpanner } from \"react-icons/ti\";\n\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//@import url('https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css');\n\n\n\nclass App extends Component {\n  //state = variables\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    poolSbtBalance: 0,\n    poolEthBalance: 0\n  };\n\n  componentDidMount = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set contract to the state\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n\n    // await this.getSbTokenContract();\n\n    // await this.getPoolContract();\n\n    // await this.getPoolSupply();\n\n\n    //await this.runSimpleStorage();\n\n\n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return this.state.web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    return this.state.web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolContract = async () => {\n    try {\n\n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n\n  //get sbtoken contract\n  getSbTokenContract = async () => {\n\n    try {\n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract or web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n\n  getPoolSupply = async () => {\n    const { accounts, sbTokenContract, poolContract } = this.state;\n\n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei('50')).send({ from: accounts[0] });\n    //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n    //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n    await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei('3')).send({ from: accounts[0] });\n    await poolContract.methods.settingUp(this.tokenToWei('3')).send({ value: this.tokenToWei('1'), from: accounts[0] }).on('transactionHash', function () { });\n\n\n\n    const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n    const ethBalance = await poolContract.methods.getBalanceEth().call();\n    //const sbtBalance = '10000';\n    //const ethBalance =  '1000000000';\n\n    this.setState({ poolSbtBalance: this.weiToToken(sbtBalance), poolEthBalance: this.weiToToken(ethBalance) });\n\n\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"divBox\">\n          <h2><TiSpanner style={{ fontSize: 35,  transform: \"scaleX(-1)\" }} /> Set Up Pool</h2>\n          <div class=\"input-group mb-3\" style={{width:\"70%\", alignItems:\"center\", margin:\"auto\"}}>\n            \n              <span class=\"input-group-text\" id=\"basic-addon1\">ETH</span>\n            \n            <input type=\"number\" class=\"form-control\" placeholder=\"Amount of Ether...\" step=\"0.00001\" min=\"0.0001\"></input>\n          </div>\n\n          <div>The ETH balance is: {this.state.poolEthBalance}</div>\n          <div>The SBT balance is: {this.state.poolSbtBalance}</div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}