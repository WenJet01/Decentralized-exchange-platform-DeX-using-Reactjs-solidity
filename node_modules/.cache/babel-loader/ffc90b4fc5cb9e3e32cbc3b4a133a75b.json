{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      //alert(1);\n      await this.getSbTokenContract();\n      alert(12);\n      await this.getPoolContract();\n      alert(\"pool\" + this.state.poolContract);\n      await this.getPoolSupply();\n      await this.runSimpleStorage();\n    };\n\n    this.tokenToWei = n => {\n      return this.state.web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      return this.state.web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        const web3 = this.state.web3; // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address);\n        alert(\"got\"); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // const web3 = await getWeb3();\n        // alert(\"instance2\");\n        // // Use web3 to get the user's accounts.\n        // const accounts = await web3.eth.getAccounts();\n        // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address);\n        alert(instance); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance,\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract or web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolSupply = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            sbTokenContract = _this$state2.sbTokenContract,\n            poolContract = _this$state2.poolContract; // alert(this.state.poolContract);\n      // Stores a given value, 5 by default.\n      // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n      //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      const bi = await sbTokenContract.methods.approve(poolContract.options.address, '100').send({\n        from: accounts[0]\n      });\n      const b2i = poolContract.methods.settingUp(accounts[0], '10', '0').call();\n      const sbtBalance = poolContract.methods.getBalanceSbt.call();\n      const ethBalance = 0;\n      this.setState({\n        poolSbtBalance: sbtBalance,\n        poolEthBalance: ethBalance\n      }, () => {\n        alert(this.state.poolSbtBalance);\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"The ETH balance is: \", this.state.ethBalance), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"The SBT balance is: \", this.state.sbtBalance.toString()));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","App","state","storageValue","web3","accounts","contract","componentDidMount","getSbTokenContract","alert","getPoolContract","poolContract","getPoolSupply","runSimpleStorage","tokenToWei","n","utils","toWei","weiToToken","fromWei","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","console","sbTokenContract","methods","set","send","from","response","get","call","bi","approve","options","b2i","settingUp","sbtBalance","getBalanceSbt","ethBalance","poolSbtBalance","poolEthBalance","render","toString"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n  //state = variables\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount =  async() => {\n    \n    \n    \n    //alert(1);\n    await this.getSbTokenContract();\n    alert(12);\n    await this.getPoolContract();\n    alert(\"pool\" + this.state.poolContract);\n    await this.getPoolSupply();\n    \n    await this.runSimpleStorage();\n    \n   \n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return this.state.web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    return this.state.web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async() =>{\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  getPoolContract = async() => {\n    try {\n      const web3 =  this.state.web3;\n      // Get the contract instance.\n      const networkId =  await web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n        alert(\"got\");\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  \n\n  //get sbtoken contract\n  getSbTokenContract = async() => {\n    \n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n        \n      // const web3 = await getWeb3();\n      // alert(\"instance2\");\n\n      // // Use web3 to get the user's accounts.\n      // const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      alert(instance);\n      \n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance ,web3,accounts});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract or web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolSupply = async () => {\n    const {accounts,sbTokenContract,poolContract} = this.state;\n    // alert(this.state.poolContract);\n    // Stores a given value, 5 by default.\n    \n    // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    const bi = await sbTokenContract.methods.approve(poolContract.options.address,'100').send({from:accounts[0]});\n    const b2i = poolContract.methods.settingUp(accounts[0],'10','0').call();\n    const sbtBalance =  poolContract.methods.getBalanceSbt.call();\n    const ethBalance =  0;\n\n    this.setState({poolSbtBalance:sbtBalance, poolEthBalance:ethBalance},()=>{alert(this.state.poolSbtBalance)});\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <div>The ETH balance is: {this.state.ethBalance}</div>\n        <div>The SBT balance is: {this.state.sbtBalance.toString()}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}