{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport IoIosSwap from \"react-icons/io\";\nimport { TiSpanner } from \"react-icons/ti\";\nimport { MdSwapVert } from \"react-icons/md\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { isNumber } from \"test/utils\"; //@import url('https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      poolSbtBalance: 0,\n      poolEthBalance: 0,\n      setUpEth: null,\n      setUpSbt: null,\n      ratioEthToSbt: 0,\n      ratioSbtToEth: 0,\n      poolRunning: false\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set contract to the state\n\n        this.setState({\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3 or accounts. Check console for details.\");\n        console.error(error);\n      } // await this.getSbTokenContract();\n      // await this.getPoolContract();\n      // await this.getPoolSupply();\n      // await this.checkPoolRunning();\n      //await this.runSimpleStorage();\n\n    };\n\n    this.tokenToWei = n => {\n      return this.state.web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      return this.state.web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract or web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.deployPool = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            sbTokenContract = _this$state2.sbTokenContract,\n            poolContract = _this$state2.poolContract; //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei(this.state.setUpSbt.toString())).send({\n        from: accounts[0]\n      }); //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n      //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n\n      await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei(this.state.setUpSbt.toString())).send({\n        from: accounts[0]\n      });\n      await poolContract.methods.settingUp(this.tokenToWei(this.state.setUpSbt.toString())).send({\n        value: this.tokenToWei(this.state.setUpEth.toString()),\n        from: accounts[0]\n      }).on('transactionHash', function () {});\n      const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n      const ethBalance = await poolContract.methods.getBalanceEth().call(); //const sbtBalance = '10000';\n      //const ethBalance =  '1000000000';\n\n      this.setState({\n        poolSbtBalance: this.weiToToken(sbtBalance),\n        poolEthBalance: this.weiToToken(ethBalance)\n      }, () => this.checkPoolRunning);\n    };\n\n    this.checkPoolRunning = async () => {\n      const deployed = await this.state.poolContract.methods.isPoolRunning().call();\n      this.setState({\n        poolRunning: deployed\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"divBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(TiSpanner, {\n      style: {\n        fontSize: 40,\n        marginTop: -5,\n        transform: \"scaleX(-1)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \" Set Up Pool\"), React.createElement(\"div\", {\n      class: \"input-group mb-3\",\n      style: {\n        width: \"70%\",\n        alignItems: \"center\",\n        margin: \"auto\",\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"input-group-text\",\n      id: \"basic-addon1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"ETH\"), React.createElement(\"input\", {\n      type: \"number\",\n      class: \"form-control\",\n      placeholder: \"Amount of Ether...\",\n      step: \"0.00001\",\n      min: \"0.0001\",\n      value: this.state.setUpEth,\n      onChange: e => this.setState({\n        setUpEth: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(MdSwapVert, {\n      style: {\n        fontSize: 40,\n        marginBottom: -13,\n        marginTop: -10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"input-group mb-3\",\n      style: {\n        width: \"70%\",\n        alignItems: \"center\",\n        margin: \"auto\",\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"input-group-text\",\n      id: \"basic-addon1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"SBT\"), React.createElement(\"input\", {\n      type: \"number\",\n      class: \"form-control\",\n      placeholder: \"Amount of SbToken...\",\n      step: \"0.00001\",\n      min: \"0.0001\",\n      value: this.state.setUpSbt,\n      onChange: e => this.setState({\n        setUpSbt: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        width: \"80%\",\n        margin: \"auto\",\n        marginTop: 30,\n        display: \"flex\",\n        marginBottom: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"1 ETH : \", this.state.setUpSbt / this.state.setUpEth > 0 && this.state.setUpSbt / this.state.setUpEth < Infinity ? this.state.setUpSbt / this.state.setUpEth : 0, \" SBT\"), React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"1 SBT : \", this.state.setUpEth / this.state.setUpSbt > 0 && this.state.setUpEth / this.state.setUpSbt < Infinity ? this.state.setUpEth / this.state.setUpSbt : 0, \" ETH\")), this.state.poolRunning ? React.createElement(\"button\", {\n      class: \"btn btn-primary disabled\",\n      style: {\n        width: \"80%\",\n        marginBottom: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Pool Is Running\") : this.state.setUpSbt / this.state.setUpEth > 0 && this.state.setUpSbt / this.state.setUpEth < Infinity ? React.createElement(\"button\", {\n      class: \"btn btn-primary\",\n      style: {\n        width: \"80%\",\n        marginBottom: 15\n      },\n      onClick: () => this.deployPool(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Deploy\") : React.createElement(\"button\", {\n      class: \"btn btn-primary disabled\",\n      style: {\n        width: \"80%\",\n        marginBottom: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Deploy\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","IoIosSwap","TiSpanner","MdSwapVert","isNumber","App","state","storageValue","web3","accounts","contract","poolSbtBalance","poolEthBalance","setUpEth","setUpSbt","ratioEthToSbt","ratioSbtToEth","poolRunning","componentDidMount","eth","getAccounts","setState","error","alert","console","tokenToWei","n","utils","toWei","weiToToken","fromWei","runSimpleStorage","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","runExample","methods","set","send","from","response","get","call","getPoolContract","poolContract","getSbTokenContract","sbTokenContract","deployPool","approve","options","toString","transfer","settingUp","value","on","sbtBalance","getBalanceSbt","ethBalance","getBalanceEth","checkPoolRunning","deployed","isPoolRunning","render","fontSize","marginTop","transform","width","alignItems","margin","e","target","marginBottom","display","flex","Infinity"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport IoIosSwap from \"react-icons/io\";\nimport { TiSpanner } from \"react-icons/ti\";\nimport { MdSwapVert } from \"react-icons/md\";\n\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { isNumber } from \"test/utils\";\n//@import url('https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css');\n\n\n\nclass App extends Component {\n  //state = variables\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    poolSbtBalance: 0,\n    poolEthBalance: 0,\n    setUpEth: null,\n    setUpSbt: null,\n    ratioEthToSbt: 0,\n    ratioSbtToEth: 0,\n    poolRunning: false\n  };\n\n  componentDidMount = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set contract to the state\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n\n    // await this.getSbTokenContract();\n\n    // await this.getPoolContract();\n\n    // await this.getPoolSupply();\n\n    // await this.checkPoolRunning();\n\n\n    //await this.runSimpleStorage();\n\n\n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return this.state.web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    return this.state.web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolContract = async () => {\n    try {\n\n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n\n  //get sbtoken contract\n  getSbTokenContract = async () => {\n\n    try {\n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract or web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n\n  deployPool = async () => {\n    const { accounts, sbTokenContract, poolContract } = this.state;\n\n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei(this.state.setUpSbt.toString())).send({ from: accounts[0] });\n    //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n    //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n    await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei(this.state.setUpSbt.toString())).send({ from: accounts[0] });\n    await poolContract.methods.settingUp(this.tokenToWei(this.state.setUpSbt.toString())).send({ value: this.tokenToWei(this.state.setUpEth.toString()), from: accounts[0] }).on('transactionHash', function () { });\n\n\n\n    const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n    const ethBalance = await poolContract.methods.getBalanceEth().call();\n    //const sbtBalance = '10000';\n    //const ethBalance =  '1000000000';\n\n    this.setState({ poolSbtBalance: this.weiToToken(sbtBalance), poolEthBalance: this.weiToToken(ethBalance) }, () => this.checkPoolRunning);\n\n\n  };\n\n  checkPoolRunning = async () => {\n    const deployed = await this.state.poolContract.methods.isPoolRunning().call()\n\n    this.setState({ poolRunning: deployed });\n  }\n\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"divBox\">\n          <h3><TiSpanner style={{ fontSize: 40, marginTop: -5, transform: \"scaleX(-1)\" }} /> Set Up Pool</h3>\n          <div class=\"input-group mb-3\" style={{ width: \"70%\", alignItems: \"center\", margin: \"auto\", marginTop: 20 }}>\n\n            <span class=\"input-group-text\" id=\"basic-addon1\">ETH</span>\n\n            <input type=\"number\" class=\"form-control\" placeholder=\"Amount of Ether...\" step=\"0.00001\" min=\"0.0001\"\n              value={this.state.setUpEth} onChange={(e) => this.setState({ setUpEth: e.target.value })}>\n\n            </input>\n          </div>\n\n          <MdSwapVert style={{ fontSize: 40, marginBottom: -13, marginTop: -10 }} />\n\n          <div class=\"input-group mb-3\" style={{ width: \"70%\", alignItems: \"center\", margin: \"auto\", marginTop: 20 }}>\n\n            <span class=\"input-group-text\" id=\"basic-addon1\">SBT</span>\n\n            <input type=\"number\" class=\"form-control\" placeholder=\"Amount of SbToken...\" step=\"0.00001\" min=\"0.0001\"\n              value={this.state.setUpSbt} onChange={(e) => this.setState({ setUpSbt: e.target.value })}></input>\n          </div>\n\n          <div style={{ width: \"80%\", margin: \"auto\", marginTop: 30, display: \"flex\", marginBottom: 30 }}>\n            <div style={{ flex: 1, }}>\n              1 ETH : {(this.state.setUpSbt / this.state.setUpEth) > 0 && (this.state.setUpSbt / this.state.setUpEth) < Infinity ? this.state.setUpSbt / this.state.setUpEth : 0} SBT\n            </div>\n            <div style={{ flex: 1, }}>\n              1 SBT : {(this.state.setUpEth / this.state.setUpSbt) > 0 && (this.state.setUpEth / this.state.setUpSbt) < Infinity ? this.state.setUpEth / this.state.setUpSbt : 0} ETH\n            </div>\n\n          </div>\n\n          {this.state.poolRunning ?\n           <button class=\"btn btn-primary disabled\" style={{ width: \"80%\", marginBottom: 15 }}>\n           Pool Is Running\n         </button>\n          :\n\n          (this.state.setUpSbt / this.state.setUpEth) > 0 && (this.state.setUpSbt / this.state.setUpEth) < Infinity ?\n            <button class=\"btn btn-primary\" style={{ width: \"80%\", marginBottom: 15 }} onClick={() => this.deployPool()}>\n              Deploy\n            </button>\n            :\n            <button class=\"btn btn-primary disabled\" style={{ width: \"80%\", marginBottom: 15 }}>\n              Deploy\n            </button>\n          \n        \n          }\n\n          \n\n          {/* <div>The ETH balance is: {this.state.setUpEth}</div>\n          <div>The SBT balance is: {this.state.setUpSbt}</div> */}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}