{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      poolSbtBalance: 0,\n      poolEthBalance: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set contract to the state\n\n        this.setState({\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n\n      await this.getSbTokenContract();\n      await this.getPoolContract();\n      await this.getPoolSupply(); //await this.runSimpleStorage();\n    };\n\n    this.tokenToWei = n => {\n      return this.state.web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      return this.state.web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract or web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPoolSupply = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            sbTokenContract = _this$state2.sbTokenContract,\n            poolContract = _this$state2.poolContract; //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei('50')).send({\n        from: accounts[0]\n      }); //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n      //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n\n      await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei('3')).send({\n        from: accounts[0]\n      });\n      await poolContract.methods.settingUp(this.tokenToWei('3')).send({\n        value: this.tokenToWei('1'),\n        from: accounts[0]\n      }).on('transactionHash', function () {});\n      const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n      const ethBalance = await poolContract.methods.getBalanceEth().call(); //const sbtBalance = '10000';\n      //const ethBalance =  '1000000000';\n\n      this.setState({\n        poolSbtBalance: this.weiToToken(sbtBalance),\n        poolEthBalance: this.weiToToken(ethBalance)\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"The ETH balance is: \", this.state.poolEthBalance), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"The SBT balance is: \", this.state.poolSbtBalance));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","App","state","storageValue","web3","accounts","contract","poolSbtBalance","poolEthBalance","componentDidMount","eth","getAccounts","setState","error","alert","console","getSbTokenContract","getPoolContract","getPoolSupply","tokenToWei","n","utils","toWei","weiToToken","fromWei","runSimpleStorage","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","runExample","methods","set","send","from","response","get","call","poolContract","sbTokenContract","approve","options","transfer","settingUp","value","on","sbtBalance","getBalanceSbt","ethBalance","getBalanceEth","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n  //state = variables\n  state = { \n     storageValue: 0,\n     web3: null, \n     accounts: null, \n     contract: null ,\n     poolSbtBalance:0,\n     poolEthBalance:0\n    };\n\n  componentDidMount =  async() => {\n    \n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set contract to the state\n      this.setState({ web3,accounts});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n    \n    \n    await this.getSbTokenContract();\n    \n    await this.getPoolContract();\n    \n    await this.getPoolSupply();\n    \n    //await this.runSimpleStorage();\n    \n   \n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return this.state.web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    return this.state.web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async() =>{\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolContract = async() => {\n    try {\n      \n      // Get the contract instance.\n      const networkId =  await this.state.web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  \n\n  //get sbtoken contract\n  getSbTokenContract = async() => {\n    \n    try {     \n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract or web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  \n\n  getPoolSupply = async () => {\n    const {accounts,sbTokenContract,poolContract} = this.state;\n    \n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    await sbTokenContract.methods.approve(poolContract.options.address,this.tokenToWei('50')).send({from:accounts[0]});\n    //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n    //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n    await sbTokenContract.methods.transfer(poolContract.options.address,this.tokenToWei('3')).send({from:accounts[0]});\n    await poolContract.methods.settingUp( this.tokenToWei('3')).send({value:this.tokenToWei('1'), from:accounts[0]}).on('transactionHash', function(){ });\n      \n   \n    \n    const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n    const ethBalance =  await poolContract.methods.getBalanceEth().call();\n    //const sbtBalance = '10000';\n    //const ethBalance =  '1000000000';\n\n    this.setState({poolSbtBalance:this.weiToToken(sbtBalance), poolEthBalance:this.weiToToken(ethBalance)});\n\n    \n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <div>The ETH balance is: {this.state.poolEthBalance}</div>\n        <div>The SBT balance is: {this.state.poolSbtBalance}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}