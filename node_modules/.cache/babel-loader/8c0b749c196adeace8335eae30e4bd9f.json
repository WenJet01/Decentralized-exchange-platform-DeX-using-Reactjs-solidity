{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport IoIosSwap from \"react-icons/io\";\nimport { TiSpanner } from \"react-icons/ti\";\nimport { MdSwapVert } from \"react-icons/md\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; //@import url('https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      poolSbtBalance: 0,\n      poolEthBalance: 0,\n      setUpEth: 1,\n      setUpSbt: 1,\n      ratioEthToSbt: 0,\n      ratioSbtToEth: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set contract to the state\n\n        this.setState({\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3 or accounts. Check console for details.\");\n        console.error(error);\n      } // await this.getSbTokenContract();\n      // await this.getPoolContract();\n      // await this.getPoolSupply();\n      //await this.runSimpleStorage();\n\n    };\n\n    this.tokenToWei = n => {\n      return this.state.web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      return this.state.web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await this.state.web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new this.state.web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract or web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPoolSupply = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            sbTokenContract = _this$state2.sbTokenContract,\n            poolContract = _this$state2.poolContract; //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei('50')).send({\n        from: accounts[0]\n      }); //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n      //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n\n      await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei('3')).send({\n        from: accounts[0]\n      });\n      await poolContract.methods.settingUp(this.tokenToWei('3')).send({\n        value: this.tokenToWei('1'),\n        from: accounts[0]\n      }).on('transactionHash', function () {});\n      const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n      const ethBalance = await poolContract.methods.getBalanceEth().call(); //const sbtBalance = '10000';\n      //const ethBalance =  '1000000000';\n\n      this.setState({\n        poolSbtBalance: this.weiToToken(sbtBalance),\n        poolEthBalance: this.weiToToken(ethBalance)\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"divBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(TiSpanner, {\n      style: {\n        fontSize: 40,\n        marginTop: -5,\n        transform: \"scaleX(-1)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), \" Set Up Pool\"), React.createElement(\"div\", {\n      class: \"input-group mb-3\",\n      style: {\n        width: \"70%\",\n        alignItems: \"center\",\n        margin: \"auto\",\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"input-group-text\",\n      id: \"basic-addon1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"ETH\"), React.createElement(\"input\", {\n      type: \"number\",\n      class: \"form-control\",\n      placeholder: \"Amount of Ether...\",\n      step: \"0.00001\",\n      min: \"0.0001\",\n      value: this.state.setUpEth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    })), React.createElement(MdSwapVert, {\n      style: {\n        fontSize: 40,\n        marginBottom: -13,\n        marginTop: -10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"input-group mb-3\",\n      style: {\n        width: \"70%\",\n        alignItems: \"center\",\n        margin: \"auto\",\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"input-group-text\",\n      id: \"basic-addon1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"SBT\"), React.createElement(\"input\", {\n      type: \"number\",\n      class: \"form-control\",\n      placeholder: \"Amount of SbToken...\",\n      step: \"0.00001\",\n      min: \"0.0001\",\n      value: this.state.setUpSbt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        width: \"80%\",\n        margin: \"auto\",\n        marginTop: 10,\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        flex: 1,\n        backgroundColor: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"1 ETH : \", this.state.setUpSbt / this.state.setUpEth == 1 ? 0 : this.state.setUpSbt / this.state.setUpEth, \" SBT\"), React.createElement(\"div\", {\n      style: {\n        flex: 1,\n        backgroundColor: \"yellow\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"The ETH balance is: \", this.state.poolEthBalance), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"The SBT balance is: \", this.state.poolSbtBalance)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","IoIosSwap","TiSpanner","MdSwapVert","App","state","storageValue","web3","accounts","contract","poolSbtBalance","poolEthBalance","setUpEth","setUpSbt","ratioEthToSbt","ratioSbtToEth","componentDidMount","eth","getAccounts","setState","error","alert","console","tokenToWei","n","utils","toWei","weiToToken","fromWei","runSimpleStorage","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","runExample","methods","set","send","from","response","get","call","getPoolContract","poolContract","getSbTokenContract","sbTokenContract","getPoolSupply","approve","options","transfer","settingUp","value","on","sbtBalance","getBalanceSbt","ethBalance","getBalanceEth","render","fontSize","marginTop","transform","width","alignItems","margin","marginBottom","display","flex","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport IoIosSwap from \"react-icons/io\";\nimport { TiSpanner } from \"react-icons/ti\";\nimport {MdSwapVert} from \"react-icons/md\";\n\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//@import url('https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css');\n\n\n\nclass App extends Component {\n  //state = variables\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    poolSbtBalance: 0,\n    poolEthBalance: 0,\n    setUpEth:1,\n    setUpSbt:1,\n    ratioEthToSbt:0,\n    ratioSbtToEth:0\n  };\n\n  componentDidMount = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set contract to the state\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n\n    // await this.getSbTokenContract();\n\n    // await this.getPoolContract();\n\n    // await this.getPoolSupply();\n\n\n    //await this.runSimpleStorage();\n\n\n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return this.state.web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    return this.state.web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolContract = async () => {\n    try {\n\n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n\n  //get sbtoken contract\n  getSbTokenContract = async () => {\n\n    try {\n      // Get the contract instance.\n      const networkId = await this.state.web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new this.state.web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract or web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n\n  getPoolSupply = async () => {\n    const { accounts, sbTokenContract, poolContract } = this.state;\n\n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    await sbTokenContract.methods.approve(poolContract.options.address, this.tokenToWei('50')).send({ from: accounts[0] });\n    //const allw = await sbTokenContract.methods.allowance(accounts[0],poolContract.options.address).call();\n    //await poolContract.methods.settingUpEth().send({value:this.tokenToWei('1'), from:accounts[0]})\n    await sbTokenContract.methods.transfer(poolContract.options.address, this.tokenToWei('3')).send({ from: accounts[0] });\n    await poolContract.methods.settingUp(this.tokenToWei('3')).send({ value: this.tokenToWei('1'), from: accounts[0] }).on('transactionHash', function () { });\n\n\n\n    const sbtBalance = await poolContract.methods.getBalanceSbt().call();\n    const ethBalance = await poolContract.methods.getBalanceEth().call();\n    //const sbtBalance = '10000';\n    //const ethBalance =  '1000000000';\n\n    this.setState({ poolSbtBalance: this.weiToToken(sbtBalance), poolEthBalance: this.weiToToken(ethBalance) });\n\n\n  };\n\n  \n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"divBox\">\n          <h3><TiSpanner style={{ fontSize: 40,marginTop:-5,  transform: \"scaleX(-1)\" }} /> Set Up Pool</h3>\n          <div class=\"input-group mb-3\" style={{width:\"70%\", alignItems:\"center\", margin:\"auto\", marginTop:20}}>\n            \n              <span class=\"input-group-text\" id=\"basic-addon1\">ETH</span>\n            \n            <input type=\"number\" class=\"form-control\" placeholder=\"Amount of Ether...\" step=\"0.00001\" min=\"0.0001\" value={this.state.setUpEth}></input>\n          </div>\n\n          <MdSwapVert style={{ fontSize: 40,marginBottom:-13, marginTop:-10 }} />\n\n          <div class=\"input-group mb-3\" style={{width:\"70%\", alignItems:\"center\", margin:\"auto\", marginTop:20}}>\n            \n              <span class=\"input-group-text\" id=\"basic-addon1\">SBT</span>\n            \n            <input type=\"number\" class=\"form-control\" placeholder=\"Amount of SbToken...\" step=\"0.00001\" min=\"0.0001\" value={this.state.setUpSbt}></input>\n          </div>\n\n          <div style={{width:\"80%\", margin:\"auto\", marginTop:10, display:\"flex\"}}>\n            <div style={{flex:1, backgroundColor:\"red\"}}>\n              1 ETH : {this.state.setUpSbt/this.state.setUpEth == 1? 0 : this.state.setUpSbt/this.state.setUpEth} SBT\n            </div>\n            <div style={{flex:1, backgroundColor:\"yellow\"}}>\n\n            </div>\n\n          </div>\n\n          <div>The ETH balance is: {this.state.poolEthBalance}</div>\n          <div>The SBT balance is: {this.state.poolSbtBalance}</div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}