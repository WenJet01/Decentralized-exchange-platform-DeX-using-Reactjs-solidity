{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      await Promise.all([this.getSbTokenContract(), alert(12), this.getPoolContract(), alert(\"pool\" + this.state.poolContract), this.getPoolSupply(), this.runSimpleStorage()]); //alert(1);\n    };\n\n    this.tokenToWei = n => {\n      return this.state.web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      return this.state.web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        const web3 = await getWeb3(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address);\n        alert(\"got\"); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // const web3 = await getWeb3();\n        // alert(\"instance2\");\n        // // Use web3 to get the user's accounts.\n        // const accounts = await web3.eth.getAccounts();\n        // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address);\n        alert(instance); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance,\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract or web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolSupply = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            sbTokenContract = _this$state2.sbTokenContract,\n            poolContract = _this$state2.poolContract; // alert(this.state.poolContract);\n      // Stores a given value, 5 by default.\n      // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n      //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      await sbTokenContract.methods.approve(poolContract.options.address, '100').send({\n        from: accounts[0]\n      });\n      await poolContract.methods.settingUp(accounts[0], '100', '0').send({\n        from: accounts[0]\n      });\n      const sbtBalance = await poolContract.sbtBalance.call();\n      const ethBalance = await poolContract.ethBalance.call();\n      this.setState({\n        poolSbtBalance: sbtBalance,\n        poolEthBalance: ethBalance\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"The ETH balance is: \", this.state.ethBalance), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"The SBT balance is: \", this.state.sbtBalance));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","App","state","storageValue","web3","accounts","contract","componentDidMount","Promise","all","getSbTokenContract","alert","getPoolContract","poolContract","getPoolSupply","runSimpleStorage","tokenToWei","n","utils","toWei","weiToToken","fromWei","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","console","sbTokenContract","methods","set","send","from","response","get","call","approve","options","settingUp","sbtBalance","ethBalance","poolSbtBalance","poolEthBalance","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n  //state = variables\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount =  async() => {\n    \n    \n    await Promise.all([\n      this.getSbTokenContract(),\n      alert(12),\n       this.getPoolContract(),\n      alert(\"pool\" + this.state.poolContract),\n       this.getPoolSupply(),\n      \n       this.runSimpleStorage()\n\n\n    ]);\n    //alert(1);\n     \n    \n   \n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return this.state.web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    return this.state.web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async() =>{\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  getPoolContract = async() => {\n    try {\n      const web3 =  await getWeb3();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n        alert(\"got\");\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  \n\n  //get sbtoken contract\n  getSbTokenContract = async() => {\n    \n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n        \n      // const web3 = await getWeb3();\n      // alert(\"instance2\");\n\n      // // Use web3 to get the user's accounts.\n      // const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      alert(instance);\n      \n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance ,web3,accounts});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract or web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolSupply = async () => {\n    const {accounts,sbTokenContract,poolContract} = this.state;\n    // alert(this.state.poolContract);\n    // Stores a given value, 5 by default.\n    \n    // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    await sbTokenContract.methods.approve(poolContract.options.address,'100').send({from:accounts[0]});\n    await poolContract.methods.settingUp(accounts[0],'100','0').send({from:accounts[0]});\n    const sbtBalance =  await poolContract.sbtBalance.call();\n    const ethBalance =  await poolContract.ethBalance.call();\n\n    this.setState({poolSbtBalance:sbtBalance, poolEthBalance:ethBalance});\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <div>The ETH balance is: {this.state.ethBalance}</div>\n        <div>The SBT balance is: {this.state.sbtBalance}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}