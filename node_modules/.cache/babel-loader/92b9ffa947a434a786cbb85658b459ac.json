{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakur\\\\Desktop\\\\bc\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\";\nimport pool from \"./contracts/pool.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3 or accounts. Check console for details.\");\n        console.error(error);\n      }\n\n      this.getSbTokenContract();\n      this.getPoolContract();\n      this.runSimpleStorage();\n    };\n\n    this.tokenToWei = n => {\n      return web3.utils.toWei(n, 'ether');\n    };\n\n    this.weiToToken = n => {\n      web3.utils.fromWei(n, 'ether');\n    };\n\n    this.runSimpleStorage = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPoolContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = pool.networks[networkId];\n        const instance = new web3.eth.Contract(pool.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          poolContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load pool contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.getPool1 = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; //alert(accounts);\n      // Stores a given value, 5 by default.\n\n      const response1 = await contract.methods.approve(this.state.poolContract.options.address, '100').send({\n        from: accounts[0]\n      });\n      const response2 = await this.state.poolContract.methods.settingUp(accounts[0], '100', '0').send({\n        from: accounts[0]\n      });\n      const response = await contract.methods.balanceOf(this.state.poolContract.options.address).call();\n      this.setState({\n        balancePool: response\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n\n    this.getSbTokenContract = async () => {\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SbToken.networks[networkId];\n        const instance = new web3.eth.Contract(SbToken.abi, deployedNetwork && deployedNetwork.address); // Set contract to the state\n\n        this.setState({\n          sbTokenContract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load sbtoken contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.getPoolSupply = async () => {\n      const accounts = this.state.accounts; // alert(this.state.poolContract);\n      // Stores a given value, 5 by default.\n      // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n      //const response = await contract.methods.balanceOf(accounts[0]).call();\n\n      await this.state.sbTokenContract.methods.approve(this.state.poolContract.options.address, '100').send({\n        from: accounts[0]\n      });\n      await this.state.poolContract.methods.settingUp(accounts[0], '100', '0').send({\n        from: accounts[0]\n      });\n      const sbtBalance = await this.state.sbTokenContract.methods.balanceOf(this.state.poolContract.options.address).call();\n      const ethBalance = web3.eth.getBalance(this.state.poolContract.options.address);\n      this.setState({\n        poolSbtBalance: sbtBalance,\n        poolEthBalance: ethBalance\n      }); // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n      // // Update state with the result.\n      // this.setState({ storageValue: response });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"The balance is: \", this.state.balancePool));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/bakur/Desktop/bc/client/src/App.js"],"names":["React","Component","SimpleStorageContract","SbToken","pool","getWeb3","App","state","storageValue","web3","accounts","contract","componentDidMount","eth","getAccounts","setState","error","alert","console","getSbTokenContract","getPoolContract","runSimpleStorage","tokenToWei","n","utils","toWei","weiToToken","fromWei","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","runExample","poolContract","getPool1","response1","methods","approve","options","send","from","response2","settingUp","response","balanceOf","call","balancePool","sbTokenContract","set","get","getPoolSupply","sbtBalance","ethBalance","getBalance","poolSbtBalance","poolEthBalance","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport SbToken from \"./contracts/SbToken.json\"\nimport pool from \"./contracts/pool.json\"\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  //state = variables\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3 or accounts. Check console for details.`,\n      );\n      console.error(error);\n    }\n    \n    this.getSbTokenContract();\n    this.getPoolContract();\n    \n    \n    this.runSimpleStorage();\n    \n   \n  };\n\n  //convert token to wei\n  tokenToWei = (n) => {\n    return web3.utils.toWei(n, 'ether');\n  }\n\n  //convert wei to token\n  weiToToken = (n) => {\n    web3.utils.fromWei(n, 'ether');\n  }\n\n  runSimpleStorage = async() =>{\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  getPoolContract = async() => {\n    try {\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = pool.networks[networkId];\n      const instance = new web3.eth.Contract(\n        pool.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, poolContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load pool contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  getPool1 = async () => {\n    const { accounts, contract } = this.state;\n    //alert(accounts);\n    // Stores a given value, 5 by default.\n    \n    const response1 = await contract.methods.approve(this.state.poolContract.options.address,'100').send({from:accounts[0]});\n    const response2 = await this.state.poolContract.methods.settingUp(accounts[0],'100','0').send({from:accounts[0]});\n    const response = await contract.methods.balanceOf(this.state.poolContract.options.address).call();\n\n    this.setState({balancePool:response})\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  //get sbtoken contract\n  getSbTokenContract = async() => {\n    try {  \n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SbToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SbToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n\n      // Set contract to the state\n      this.setState({ sbTokenContract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load sbtoken contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  getPoolSupply = async () => {\n    const { accounts} = this.state;\n    // alert(this.state.poolContract);\n    // Stores a given value, 5 by default.\n    \n    // await contract._mint('0x7e4aBb44a722a4445210cC8Ba5d84b56640dC7Ee','10000000000000000000000000000');\n\n\n    //const response = await contract.methods.balanceOf(accounts[0]).call();\n    await this.state.sbTokenContract.methods.approve(this.state.poolContract.options.address,'100').send({from:accounts[0]});\n    await this.state.poolContract.methods.settingUp(accounts[0],'100','0').send({from:accounts[0]});\n    const sbtBalance = await this.state.sbTokenContract.methods.balanceOf(this.state.poolContract.options.address).call();\n    const ethBalance = web3.eth.getBalance(this.state.poolContract.options.address);\n\n    this.setState({poolSbtBalance:sbtBalance, poolEthBalance:ethBalance});\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <div>The balance is: {this.state.balancePool}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}